// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorCode.proto

package com.bingo.cmd;

public final class ErrorCodeOuterClass {
  private ErrorCodeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code com.bingo.cmd.ErrorCode}
   */
  public enum ErrorCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ErrCode_Success = 0;</code>
     */
    ErrCode_Success(0),
    /**
     * <code>ErrCode_Reg_AccExist = 1;</code>
     */
    ErrCode_Reg_AccExist(1),
    /**
     * <pre>
     * 账号注册失败
     * </pre>
     *
     * <code>ErrCode_Reg_Failed = 2;</code>
     */
    ErrCode_Reg_Failed(2),
    /**
     * <pre>
     * 账号验证，账号数据不存在
     * </pre>
     *
     * <code>ErrCode_Auth_AccNone = 3;</code>
     */
    ErrCode_Auth_AccNone(3),
    /**
     * <pre>
     * 玩家数据不存在
     * </pre>
     *
     * <code>ErrCode_UserData_None = 4;</code>
     */
    ErrCode_UserData_None(4),
    /**
     * <pre>
     * 玩家已经在游戏内
     * </pre>
     *
     * <code>ErrCode_Player_Exist = 5;</code>
     */
    ErrCode_Player_Exist(5),
    /**
     * <pre>
     * 无效卡
     * </pre>
     *
     * <code>ErrCode_Recharge_InvalidCard = 6;</code>
     */
    ErrCode_Recharge_InvalidCard(6),
    /**
     * <code>ErrCode_Money_NotEnough = 7;</code>
     */
    ErrCode_Money_NotEnough(7),
    /**
     * <pre>
     * 账号被冻结
     * </pre>
     *
     * <code>ErrCode_Account_Freeze = 8;</code>
     */
    ErrCode_Account_Freeze(8),
    /**
     * <pre>
     * 重复签到
     * </pre>
     *
     * <code>ErrCode_Sign_Repeated = 10;</code>
     */
    ErrCode_Sign_Repeated(10),
    /**
     * <pre>
     * 签到金币不够
     * </pre>
     *
     * <code>ErrCode_Sign_MoneyNotEnough = 11;</code>
     */
    ErrCode_Sign_MoneyNotEnough(11),
    /**
     * <pre>
     * 签到日期非法
     * </pre>
     *
     * <code>ErrCode_Sign_DayError = 12;</code>
     */
    ErrCode_Sign_DayError(12),
    /**
     * <pre>
     * 非法房间
     * </pre>
     *
     * <code>ErrCode_DDZ_RoomInvalid = 13;</code>
     */
    ErrCode_DDZ_RoomInvalid(13),
    /**
     * <pre>
     * 已经有房间了
     * </pre>
     *
     * <code>ErrCode_DDZ_RoomRepeated = 14;</code>
     */
    ErrCode_DDZ_RoomRepeated(14),
    /**
     * <pre>
     * 重复验证账号太频繁
     * </pre>
     *
     * <code>ErrCode_Auth_Repeated = 15;</code>
     */
    ErrCode_Auth_Repeated(15),
    /**
     * <pre>
     * 房卡不足
     * </pre>
     *
     * <code>ErrCode_Tickets_NotEnough = 20;</code>
     */
    ErrCode_Tickets_NotEnough(20),
    /**
     * <pre>
     * 玩家不在线
     * </pre>
     *
     * <code>ErrCode_Friend_Offline = 100;</code>
     */
    ErrCode_Friend_Offline(100),
    /**
     * <pre>
     * 玩家不存在
     * </pre>
     *
     * <code>ErrCode_Friend_None = 101;</code>
     */
    ErrCode_Friend_None(101),
    /**
     * <pre>
     * 拒绝邀请
     * </pre>
     *
     * <code>ErrCode_Friend_Refuse_Invite = 102;</code>
     */
    ErrCode_Friend_Refuse_Invite(102),
    /**
     * <pre>
     * 已经在牌桌
     * </pre>
     *
     * <code>ErrCode_Friend_InDesk = 103;</code>
     */
    ErrCode_Friend_InDesk(103),
    /**
     * <pre>
     * 牌桌不存在
     * </pre>
     *
     * <code>ErrCode_Friend_DeskInvalid = 104;</code>
     */
    ErrCode_Friend_DeskInvalid(104),
    /**
     * <pre>
     * 不是桌主
     * </pre>
     *
     * <code>ErrCode_Friend_NotDeskOwner = 105;</code>
     */
    ErrCode_Friend_NotDeskOwner(105),
    /**
     * <pre>
     * 对方拒绝你的进桌申请
     * </pre>
     *
     * <code>ErrCode_Friend_Refuse_JoinDesk = 106;</code>
     */
    ErrCode_Friend_Refuse_JoinDesk(106),
    /**
     * <pre>
     * 不是馆长
     * </pre>
     *
     * <code>ErrCode_FRoom_NotOwner = 200;</code>
     */
    ErrCode_FRoom_NotOwner(200),
    /**
     * <pre>
     * 已经绑定其他麻将馆
     * </pre>
     *
     * <code>ErrCode_FRoom_HasBindRoom = 201;</code>
     */
    ErrCode_FRoom_HasBindRoom(201),
    /**
     * <pre>
     * 已经有牌桌，不可重复创建
     * </pre>
     *
     * <code>ErrCode_FRoom_HasDesk = 202;</code>
     */
    ErrCode_FRoom_HasDesk(202),
    /**
     * <pre>
     * 牌桌不存在
     * </pre>
     *
     * <code>ErrCode_FRoom_DeskInvalid = 203;</code>
     */
    ErrCode_FRoom_DeskInvalid(203),
    /**
     * <pre>
     * 非法牌匾
     * </pre>
     *
     * <code>ErrCode_FRoom_BoardInvalid = 204;</code>
     */
    ErrCode_FRoom_BoardInvalid(204),
    /**
     * <pre>
     * 非法建桌规则，需要设定局数
     * </pre>
     *
     * <code>ErrCode_FRoom_InvalidRuler_NeedBouts = 205;</code>
     */
    ErrCode_FRoom_InvalidRuler_NeedBouts(205),
    /**
     * <pre>
     * 房间不存在
     * </pre>
     *
     * <code>ErrCode_FRoom_Invalid = 206;</code>
     */
    ErrCode_FRoom_Invalid(206),
    /**
     * <pre>
     * 人数已满
     * </pre>
     *
     * <code>ErrCode_FRoom_PlayerFull = 207;</code>
     */
    ErrCode_FRoom_PlayerFull(207),
    /**
     * <pre>
     * 操作太频繁
     * </pre>
     *
     * <code>ErrCode_Op_Fast = 300;</code>
     */
    ErrCode_Op_Fast(300),
    /**
     * <pre>
     * 已经绑定邀请码
     * </pre>
     *
     * <code>ErrCode_HasBind_InviteCode = 301;</code>
     */
    ErrCode_HasBind_InviteCode(301),
    /**
     * <pre>
     *绑定邀请码失败
     * </pre>
     *
     * <code>ErrCode_BindInviteCode_Failed = 302;</code>
     */
    ErrCode_BindInviteCode_Failed(302),
    /**
     * <pre>
     * 没有该邀请玩家
     * </pre>
     *
     * <code>ErrCode_PickInviteAward_NotUser = 303;</code>
     */
    ErrCode_PickInviteAward_NotUser(303),
    ;

    /**
     * <code>ErrCode_Success = 0;</code>
     */
    public static final int ErrCode_Success_VALUE = 0;
    /**
     * <code>ErrCode_Reg_AccExist = 1;</code>
     */
    public static final int ErrCode_Reg_AccExist_VALUE = 1;
    /**
     * <pre>
     * 账号注册失败
     * </pre>
     *
     * <code>ErrCode_Reg_Failed = 2;</code>
     */
    public static final int ErrCode_Reg_Failed_VALUE = 2;
    /**
     * <pre>
     * 账号验证，账号数据不存在
     * </pre>
     *
     * <code>ErrCode_Auth_AccNone = 3;</code>
     */
    public static final int ErrCode_Auth_AccNone_VALUE = 3;
    /**
     * <pre>
     * 玩家数据不存在
     * </pre>
     *
     * <code>ErrCode_UserData_None = 4;</code>
     */
    public static final int ErrCode_UserData_None_VALUE = 4;
    /**
     * <pre>
     * 玩家已经在游戏内
     * </pre>
     *
     * <code>ErrCode_Player_Exist = 5;</code>
     */
    public static final int ErrCode_Player_Exist_VALUE = 5;
    /**
     * <pre>
     * 无效卡
     * </pre>
     *
     * <code>ErrCode_Recharge_InvalidCard = 6;</code>
     */
    public static final int ErrCode_Recharge_InvalidCard_VALUE = 6;
    /**
     * <code>ErrCode_Money_NotEnough = 7;</code>
     */
    public static final int ErrCode_Money_NotEnough_VALUE = 7;
    /**
     * <pre>
     * 账号被冻结
     * </pre>
     *
     * <code>ErrCode_Account_Freeze = 8;</code>
     */
    public static final int ErrCode_Account_Freeze_VALUE = 8;
    /**
     * <pre>
     * 重复签到
     * </pre>
     *
     * <code>ErrCode_Sign_Repeated = 10;</code>
     */
    public static final int ErrCode_Sign_Repeated_VALUE = 10;
    /**
     * <pre>
     * 签到金币不够
     * </pre>
     *
     * <code>ErrCode_Sign_MoneyNotEnough = 11;</code>
     */
    public static final int ErrCode_Sign_MoneyNotEnough_VALUE = 11;
    /**
     * <pre>
     * 签到日期非法
     * </pre>
     *
     * <code>ErrCode_Sign_DayError = 12;</code>
     */
    public static final int ErrCode_Sign_DayError_VALUE = 12;
    /**
     * <pre>
     * 非法房间
     * </pre>
     *
     * <code>ErrCode_DDZ_RoomInvalid = 13;</code>
     */
    public static final int ErrCode_DDZ_RoomInvalid_VALUE = 13;
    /**
     * <pre>
     * 已经有房间了
     * </pre>
     *
     * <code>ErrCode_DDZ_RoomRepeated = 14;</code>
     */
    public static final int ErrCode_DDZ_RoomRepeated_VALUE = 14;
    /**
     * <pre>
     * 重复验证账号太频繁
     * </pre>
     *
     * <code>ErrCode_Auth_Repeated = 15;</code>
     */
    public static final int ErrCode_Auth_Repeated_VALUE = 15;
    /**
     * <pre>
     * 房卡不足
     * </pre>
     *
     * <code>ErrCode_Tickets_NotEnough = 20;</code>
     */
    public static final int ErrCode_Tickets_NotEnough_VALUE = 20;
    /**
     * <pre>
     * 玩家不在线
     * </pre>
     *
     * <code>ErrCode_Friend_Offline = 100;</code>
     */
    public static final int ErrCode_Friend_Offline_VALUE = 100;
    /**
     * <pre>
     * 玩家不存在
     * </pre>
     *
     * <code>ErrCode_Friend_None = 101;</code>
     */
    public static final int ErrCode_Friend_None_VALUE = 101;
    /**
     * <pre>
     * 拒绝邀请
     * </pre>
     *
     * <code>ErrCode_Friend_Refuse_Invite = 102;</code>
     */
    public static final int ErrCode_Friend_Refuse_Invite_VALUE = 102;
    /**
     * <pre>
     * 已经在牌桌
     * </pre>
     *
     * <code>ErrCode_Friend_InDesk = 103;</code>
     */
    public static final int ErrCode_Friend_InDesk_VALUE = 103;
    /**
     * <pre>
     * 牌桌不存在
     * </pre>
     *
     * <code>ErrCode_Friend_DeskInvalid = 104;</code>
     */
    public static final int ErrCode_Friend_DeskInvalid_VALUE = 104;
    /**
     * <pre>
     * 不是桌主
     * </pre>
     *
     * <code>ErrCode_Friend_NotDeskOwner = 105;</code>
     */
    public static final int ErrCode_Friend_NotDeskOwner_VALUE = 105;
    /**
     * <pre>
     * 对方拒绝你的进桌申请
     * </pre>
     *
     * <code>ErrCode_Friend_Refuse_JoinDesk = 106;</code>
     */
    public static final int ErrCode_Friend_Refuse_JoinDesk_VALUE = 106;
    /**
     * <pre>
     * 不是馆长
     * </pre>
     *
     * <code>ErrCode_FRoom_NotOwner = 200;</code>
     */
    public static final int ErrCode_FRoom_NotOwner_VALUE = 200;
    /**
     * <pre>
     * 已经绑定其他麻将馆
     * </pre>
     *
     * <code>ErrCode_FRoom_HasBindRoom = 201;</code>
     */
    public static final int ErrCode_FRoom_HasBindRoom_VALUE = 201;
    /**
     * <pre>
     * 已经有牌桌，不可重复创建
     * </pre>
     *
     * <code>ErrCode_FRoom_HasDesk = 202;</code>
     */
    public static final int ErrCode_FRoom_HasDesk_VALUE = 202;
    /**
     * <pre>
     * 牌桌不存在
     * </pre>
     *
     * <code>ErrCode_FRoom_DeskInvalid = 203;</code>
     */
    public static final int ErrCode_FRoom_DeskInvalid_VALUE = 203;
    /**
     * <pre>
     * 非法牌匾
     * </pre>
     *
     * <code>ErrCode_FRoom_BoardInvalid = 204;</code>
     */
    public static final int ErrCode_FRoom_BoardInvalid_VALUE = 204;
    /**
     * <pre>
     * 非法建桌规则，需要设定局数
     * </pre>
     *
     * <code>ErrCode_FRoom_InvalidRuler_NeedBouts = 205;</code>
     */
    public static final int ErrCode_FRoom_InvalidRuler_NeedBouts_VALUE = 205;
    /**
     * <pre>
     * 房间不存在
     * </pre>
     *
     * <code>ErrCode_FRoom_Invalid = 206;</code>
     */
    public static final int ErrCode_FRoom_Invalid_VALUE = 206;
    /**
     * <pre>
     * 人数已满
     * </pre>
     *
     * <code>ErrCode_FRoom_PlayerFull = 207;</code>
     */
    public static final int ErrCode_FRoom_PlayerFull_VALUE = 207;
    /**
     * <pre>
     * 操作太频繁
     * </pre>
     *
     * <code>ErrCode_Op_Fast = 300;</code>
     */
    public static final int ErrCode_Op_Fast_VALUE = 300;
    /**
     * <pre>
     * 已经绑定邀请码
     * </pre>
     *
     * <code>ErrCode_HasBind_InviteCode = 301;</code>
     */
    public static final int ErrCode_HasBind_InviteCode_VALUE = 301;
    /**
     * <pre>
     *绑定邀请码失败
     * </pre>
     *
     * <code>ErrCode_BindInviteCode_Failed = 302;</code>
     */
    public static final int ErrCode_BindInviteCode_Failed_VALUE = 302;
    /**
     * <pre>
     * 没有该邀请玩家
     * </pre>
     *
     * <code>ErrCode_PickInviteAward_NotUser = 303;</code>
     */
    public static final int ErrCode_PickInviteAward_NotUser_VALUE = 303;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ErrorCode valueOf(int value) {
      return forNumber(value);
    }

    public static ErrorCode forNumber(int value) {
      switch (value) {
        case 0: return ErrCode_Success;
        case 1: return ErrCode_Reg_AccExist;
        case 2: return ErrCode_Reg_Failed;
        case 3: return ErrCode_Auth_AccNone;
        case 4: return ErrCode_UserData_None;
        case 5: return ErrCode_Player_Exist;
        case 6: return ErrCode_Recharge_InvalidCard;
        case 7: return ErrCode_Money_NotEnough;
        case 8: return ErrCode_Account_Freeze;
        case 10: return ErrCode_Sign_Repeated;
        case 11: return ErrCode_Sign_MoneyNotEnough;
        case 12: return ErrCode_Sign_DayError;
        case 13: return ErrCode_DDZ_RoomInvalid;
        case 14: return ErrCode_DDZ_RoomRepeated;
        case 15: return ErrCode_Auth_Repeated;
        case 20: return ErrCode_Tickets_NotEnough;
        case 100: return ErrCode_Friend_Offline;
        case 101: return ErrCode_Friend_None;
        case 102: return ErrCode_Friend_Refuse_Invite;
        case 103: return ErrCode_Friend_InDesk;
        case 104: return ErrCode_Friend_DeskInvalid;
        case 105: return ErrCode_Friend_NotDeskOwner;
        case 106: return ErrCode_Friend_Refuse_JoinDesk;
        case 200: return ErrCode_FRoom_NotOwner;
        case 201: return ErrCode_FRoom_HasBindRoom;
        case 202: return ErrCode_FRoom_HasDesk;
        case 203: return ErrCode_FRoom_DeskInvalid;
        case 204: return ErrCode_FRoom_BoardInvalid;
        case 205: return ErrCode_FRoom_InvalidRuler_NeedBouts;
        case 206: return ErrCode_FRoom_Invalid;
        case 207: return ErrCode_FRoom_PlayerFull;
        case 300: return ErrCode_Op_Fast;
        case 301: return ErrCode_HasBind_InviteCode;
        case 302: return ErrCode_BindInviteCode_Failed;
        case 303: return ErrCode_PickInviteAward_NotUser;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ErrorCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
            public ErrorCode findValueByNumber(int number) {
              return ErrorCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.bingo.cmd.ErrorCodeOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final ErrorCode[] VALUES = values();

    public static ErrorCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ErrorCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.bingo.cmd.ErrorCode)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017ErrorCode.proto\022\rcom.bingo.cmd*\240\010\n\tErr" +
      "orCode\022\023\n\017ErrCode_Success\020\000\022\030\n\024ErrCode_R" +
      "eg_AccExist\020\001\022\026\n\022ErrCode_Reg_Failed\020\002\022\030\n" +
      "\024ErrCode_Auth_AccNone\020\003\022\031\n\025ErrCode_UserD" +
      "ata_None\020\004\022\030\n\024ErrCode_Player_Exist\020\005\022 \n\034" +
      "ErrCode_Recharge_InvalidCard\020\006\022\033\n\027ErrCod" +
      "e_Money_NotEnough\020\007\022\032\n\026ErrCode_Account_F" +
      "reeze\020\010\022\031\n\025ErrCode_Sign_Repeated\020\n\022\037\n\033Er" +
      "rCode_Sign_MoneyNotEnough\020\013\022\031\n\025ErrCode_S" +
      "ign_DayError\020\014\022\033\n\027ErrCode_DDZ_RoomInvali",
      "d\020\r\022\034\n\030ErrCode_DDZ_RoomRepeated\020\016\022\031\n\025Err" +
      "Code_Auth_Repeated\020\017\022\035\n\031ErrCode_Tickets_" +
      "NotEnough\020\024\022\032\n\026ErrCode_Friend_Offline\020d\022" +
      "\027\n\023ErrCode_Friend_None\020e\022 \n\034ErrCode_Frie" +
      "nd_Refuse_Invite\020f\022\031\n\025ErrCode_Friend_InD" +
      "esk\020g\022\036\n\032ErrCode_Friend_DeskInvalid\020h\022\037\n" +
      "\033ErrCode_Friend_NotDeskOwner\020i\022\"\n\036ErrCod" +
      "e_Friend_Refuse_JoinDesk\020j\022\033\n\026ErrCode_FR" +
      "oom_NotOwner\020\310\001\022\036\n\031ErrCode_FRoom_HasBind" +
      "Room\020\311\001\022\032\n\025ErrCode_FRoom_HasDesk\020\312\001\022\036\n\031E",
      "rrCode_FRoom_DeskInvalid\020\313\001\022\037\n\032ErrCode_F" +
      "Room_BoardInvalid\020\314\001\022)\n$ErrCode_FRoom_In" +
      "validRuler_NeedBouts\020\315\001\022\032\n\025ErrCode_FRoom" +
      "_Invalid\020\316\001\022\035\n\030ErrCode_FRoom_PlayerFull\020" +
      "\317\001\022\024\n\017ErrCode_Op_Fast\020\254\002\022\037\n\032ErrCode_HasB" +
      "ind_InviteCode\020\255\002\022\"\n\035ErrCode_BindInviteC" +
      "ode_Failed\020\256\002\022$\n\037ErrCode_PickInviteAward" +
      "_NotUser\020\257\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
